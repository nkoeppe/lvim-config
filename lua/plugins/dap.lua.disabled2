-- ~/.config/nvim/lua/plugins/dap.lua
local function get_pkg_path(pkg, path)
  pcall(require, 'mason')
  local root = vim.env.MASON or (vim.fn.stdpath('data') .. '/mason')
  path = path or ''
  local ret = root .. '/packages/' .. pkg .. '/' .. path
  return ret
end


return {
  "mfussenegger/nvim-dap",

  dependencies = {
    { "nvim-neotest/nvim-nio" },

    { -- vscode-js-debug
      "microsoft/vscode-js-debug",
      version = "1.*",

    },

    -- { -- bridge nvim-dap ‚ÜîÔ∏é js-debug
    --   "mxsdev/nvim-dap-vscode-js",
    --   config = function()
    --     require("dap-vscode-js").setup({
    --       -- debugger_path = vim.fn.stdpath("data") .. "/lazy/vscode-js-debug",
    --       -- debugger_cmd  = { -- üëá tell it exactly what to run
    --       --   "node",
    --       --   vim.fn.stdpath("data")
    --       --   .. "/mason/packages/js-debug-adapter/js-debug/src/dapDebugServer.js"
    --       },
    --       adapters = {
    --         "pwa-node",
    --         node = "pwa-node",
    --         "pwa-chrome",
    --         chrome = "pwa-chrome", -- alias ‚Üí makes `"type":"chrome"` valid
    --         "pwa-msedge",
    --         "pwa-extensionHost",
    --         "node-terminal",
    --       },
    --     })
    --   end,
    -- },

    { -- UI
      "rcarriga/nvim-dap-ui",
      dependencies = { "nvim-neotest/nvim-nio" },
      config = function()
        local dap, ui = require("dap"), require("dapui")

        ui.setup({
          layouts  = {
            {
              position = "left",
              size = 40,
              elements = {
                { id = "scopes",      size = 0.25 },
                { id = "breakpoints", size = 0.25 },
                { id = "stacks",      size = 0.25 },
                { id = "watches",     size = 0.25 },
              },
            },
            {
              position = "bottom",
              size = 0.25,
              elements = {
                { id = "repl",    size = 0.5 },
                { id = "console", size = 0.5 },
              },
            },
          },
          controls = { element = "repl", enabled = true },
          floating = { border = "single", mappings = { close = { "q", "<Esc>" } } },
        })

        dap.listeners.after.event_initialized["dapui"] = function() ui.open() end
        dap.listeners.before.event_terminated["dapui"] = function() ui.close() end
        dap.listeners.before.event_exited["dapui"]     = function() ui.close() end
      end,
    },
  },

  config = function()
    ------------------------------------------------------------------
    -- prettified gutter icons ---------------------------------------
    ------------------------------------------------------------------
    for name, sign in pairs({
      Stopped             = { "Û∞Åï", "DiagnosticWarn", "DapStoppedLine" },
      Breakpoint          = { "ÔÜí" },
      BreakpointCondition = { "ÔÅô" },
      BreakpointRejected  = { "ÔÅ™", "DiagnosticError" },
      LogPoint            = { "ÔÅö" },
    }) do
      vim.fn.sign_define(
        "Dap" .. name,
        { text = sign[1], texthl = sign[2] or "DiagnosticInfo", linehl = sign[3], numhl = sign[3] }
      )
    end

    ------------------------------------------------------------------
    -- language defaults (only used if launch.json is missing) -------
    ------------------------------------------------------------------
    local dap   = require("dap")
    local js_ft = { "javascript", "typescript", "javascriptreact", "typescriptreact", "vue", "node" }

    for _, ft in ipairs(js_ft) do
      dap.configurations[ft] = {
        {
          name       = "Launch file",
          type       = "pwa-node",
          request    = "launch",
          program    = "${file}",
          cwd        = vim.fn.getcwd(),
          sourceMaps = true,
        },
        {
          name       = "Attach to PID",
          type       = "pwa-node",
          request    = "attach",
          processId  = require("dap.utils").pick_process,
          cwd        = vim.fn.getcwd(),
          sourceMaps = true,
        },
      }
    end

    ------------------------------------------------------------------
    -- launch.json loader with diagnostics ---------------------------
    ------------------------------------------------------------------
    local function notify(msg, lvl)
      vim.notify(("dap.lua: %s"):format(msg), lvl or vim.log.levels.INFO)
    end

    function jsonc_decode(str)
      -- 1. strip /* block */ comments
      str = str:gsub("/%*.-%*/", "")

      -- 2. remove // comments only when they start the line (ignoring indent)
      local cleaned = {}
      for line in str:gmatch("[^\r\n]+") do
        if not line:match("^%s*//") then
          table.insert(cleaned, line)
        end
      end
      str = table.concat(cleaned, "\n")

      -- 3. decode ‚Üí will raise on real syntax errors
      return vim.fn.json_decode(str)
    end

    local vscode       = require("dap.ext.vscode")
    vscode.json_decode = jsonc_decode

    local map          = {
      node           = js_ft,
      ["pwa-node"]   = js_ft,
      chrome         = js_ft,
      ["pwa-chrome"] = js_ft,
    }

    local loaded       = vscode.load_launchjs(nil, map) or {}
    local count        = 0
    for _, list in pairs(loaded) do count = count + #list end

    if count == 0 then
      notify("No launch.json configs matched mapping ‚Äì check the \"type\" fields!", vim.log.levels.WARN)
    else
      notify(("launch.json ‚Üí registered %d configuration(s)"):format(count))
    end
  end,
}
