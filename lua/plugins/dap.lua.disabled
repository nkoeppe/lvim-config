-- lua/plugins/dap.lua
return {
  "mfussenegger/nvim-dap",
  dependencies = {
    -- UI for DAP
    {
      "rcarriga/nvim-dap-ui",
      dependencies = { "nvim-neotest/nvim-nio" },
      opts = {
        layouts = {
          {
            elements = {
              { id = "scopes", size = 0.25 },
              { id = "breakpoints", size = 0.25 },
              { id = "stacks", size = 0.25 },
              { id = "watches", size = 0.25 },
            },
            size = 40,
            position = "left",
          },
          {
            elements = {
              { id = "repl", size = 0.5 },
              { id = "console", size = 0.5 },
            },
            size = 10,
            position = "bottom",
          },
        },
        floating = {
          max_height = nil,
          max_width = nil,
          border = "rounded",
          mappings = {
            close = { "q", "<Esc>" },
          },
        },
        windows = { indent = 1 },
        render = {
          max_type_length = nil,
        },
      },
    },

    -- Virtual text for debugging
    "theHamsta/nvim-dap-virtual-text",

    -- Node.js/TypeScript debugger
    "mfussenegger/nvim-dap-node",

    -- Helper for launching debugger
    "Pocco81/dap-buddy.nvim",
  },
  config = function()
    local dap = require("dap")
    local dapui = require("dapui")
    local dapbuddy = require("dap-buddy")

    require("nvim-dap-virtual-text").setup()
    dapbuddy.setup()

    -- Setup dap-node
    require("dap-node").setup({
      debugger_path = vim.fn.stdpath("data") .. "/mason/bin/node-debug2-adapter",
      adapters = {
        "pwa-node",
        "pwa-chrome",
        "pwa-msedge",
        "node-terminal",
        "pwa-extensionHost"
      }
    })

    -- Configure dap-ui to open and close with DAP sessions
    dap.listeners.after.event_initialized["dapui_config"] = function()
      dapui.open()
    end
    dap.listeners.before.event_terminated["dapui_config"] = function()
      dapui.close()
    end
    dap.listeners.before.event_exited["dapui_config"] = function()
      dapui.close()
    end

    -- Define signs for debugging
    vim.fn.sign_define("DapBreakpoint", { text = "", texthl = "DapBreakpoint", linehl = "", numhl = "" })
    vim.fn.sign_define("DapStopped", { text = "", texthl = "DapStopped", linehl = "DapStoppedLine", numhl = "" })
    vim.fn.sign_define("DapLogPoint", { text = "", texthl = "DapLogPoint", linehl = "", numhl = "" })

    -- Configure TypeScript debugger
    dap.adapters["pwa-node"] = {
      type = "server",
      host = "127.0.0.1",
      port = 9229,
      executable = {
        command = "node",
        args = {
          vim.fn.stdpath("data") .. "/mason/packages/node-debug2-adapter/out/src/nodeDebug.js",
        },
      },
    }

    for _, language in ipairs({ "typescript", "javascript", "typescriptreact", "javascriptreact" }) do
      dap.configurations[language] = {
        {
          type = "pwa-node",
          request = "launch",
          name = "Launch file",
          program = "${file}",
          cwd = "${workspaceFolder}",
          sourceMaps = true,
          protocol = "inspector",
          console = "integratedTerminal",
        },
        {
          type = "pwa-node",
          request = "attach",
          name = "Attach to process",
          processId = require("dap.utils").pick_process,
          cwd = "${workspaceFolder}",
          sourceMaps = true,
          protocol = "inspector",
        },
      }
    end

    -- Keymaps
    vim.keymap.set("n", "<leader>db", dap.toggle_breakpoint, { desc = "DAP: Toggle Breakpoint" })
    vim.keymap.set("n", "<leader>dB", function() dap.set_breakpoint(vim.fn.input('Breakpoint condition: ')) end, { desc = "DAP: Set Conditional Breakpoint" })
    vim.keymap.set("n", "<leader>dl", function() dap.set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end, { desc = "DAP: Set Log Point" })
    vim.keymap.set("n", "<leader>dc", dap.continue, { desc = "DAP: Continue" })
    vim.keymap.set("n", "<leader>dj", dap.step_over, { desc = "DAP: Step Over" })
    vim.keymap.set("n", "<leader>dk", dap.step_into, { desc = "DAP: Step Into" })
    vim.keymap.set("n", "<leader>do", dap.step_out, { desc = "DAP: Step Out" })
    vim.keymap.set("n", "<leader>dr", dap.repl.open, { desc = "DAP: Open REPL" })
    vim.keymap.set("n", "<leader>du", dapui.toggle, { desc = "DAP: Toggle UI" })
    vim.keymap.set("n", "<leader>dC", dap.run_to_cursor, { desc = "DAP: Run to Cursor" })
    vim.keymap.set("n", "<leader>ds", dap.terminate, { desc = "DAP: Terminate" })
    vim.keymap.set("n", "<leader>dh", function() dapbuddy.run() end, { desc = "DAP: Buddy" })
  end,
}
